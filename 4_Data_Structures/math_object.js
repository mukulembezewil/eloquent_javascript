// THE MATH OBJECT

/*
The Math object is used as a container to group a bunch of related functionality.
*/

// Math.random()➡ returns a new pseudorandom number between 0(included) and 1(excluded) every time you call it.

console.log(Math.random());

console.log('\n_+_+_+_+_+_+_+_+_+_+_+_+_+_+\n');

// If we want a whole random number instead of a fractional one, we can use Math.floor (which rounds down to the nearest whole number) on the result of Math.random.

console.log(Math.floor(Math.random()));

console.log('\n_+_+_+_+_+_+_+_+_+_+_+_+_+_+\n');

// Multiplying the random number by 10 gives us a number greater than or equal to 0 and below 10.

console.log(Math.floor(Math.random() * 10)); // Since Math.floor rounds DOWN, this expression will produce, with equal chance, any number from 0 through 9.

console.log('\n_+_+_+_+_+_+_+_+_+_+_+_+_+_+\n');

// Multiplying the random number by 100 gives us a number greater than or equal to  0 and below 100? I think.

console.log(Math.random() * 100);

console.log('\n_+_+_+_+_+_+_+_+_+_+_+_+_+_+\n');

/*
In JavaScript, `Math.random()` generates a pseudo-random floating-point number between 0 (inclusive) and 1 (exclusive). Multiplying the result of `Math.random()` by 100 will scale this random number to a range between 0 (inclusive) and 100 (exclusive).

Here's what's happening:

- `Math.random()` generates a random number between 0 (inclusive) and 1 (exclusive).
- Multiplying this result by 100 scales the range of the random number. So, for example, if `Math.random()` generates `0.123`, `0.123 * 100` equals `12.3`. This means the output will range from 0 up to, but not including, 100.

This operation is commonly used to obtain random floating-point numbers within a specific range (in this case, between 0 and 99.999...). If you need integers within a specific range, you might use additional functions like `Math.floor()` to round down the result to the nearest integer. For instance, `Math.floor(Math.random() * 100)` will generate integers ranging from 0 to 99.
*/

/*
"Pseudo-random" refers to a sequence of numbers that appears to be random but is generated by a deterministic process. In computing, it's challenging to create truly random numbers because computers operate based on algorithms and initial seed values. Therefore, the numbers generated by these algorithms, while seemingly random, are actually determined by the algorithm and the initial conditions (seed) provided to it.

The term "pseudo" in "pseudo-random" indicates that while the sequence of numbers generated appears random and satisfies statistical tests for randomness, it is not truly random in the sense of being unpredictable. Given the same starting point (seed) and the same sequence of operations, a pseudo-random number generator will produce the same sequence of numbers every time.

In JavaScript, the `Math.random()` function generates pseudo-random floating-point numbers between 0 (inclusive) and 1 (exclusive). It uses a pseudo-random number generator algorithm under the hood, and its sequence can be affected by the initial seed (which is often automatically set by the environment) or by manually setting a seed using other techniques.

Pseudo-random number generators are widely used because they are fast, efficient, and adequate for many applications like simulations, games, cryptography (with proper precautions), and various other scenarios where statistical randomness is sufficient. However, for cryptographic or security-sensitive applications, more advanced techniques or external sources of randomness might be required to generate truly random numbers.
*/

// Math.ceil() rounds up to a whole number.

console.log(Math.ceil(0.02)); // rounds up
console.log(Math.floor(0.02)); // rounds down

//Math.round() rounds up to nearest whole number

console.log(Math.round(1.6)); // rounds to nearest whole number

/*
MORE MATH OBJECT THINGS
The `Math` object in JavaScript provides not only properties but also various built-in methods/functions for performing common mathematical operations. Here is a list of the functions available in the `Math` object:

1. `Math.abs(x)`: Returns the absolute (positive) value of a number `x`.
2. `Math.ceil(x)`: Returns the smallest integer greater than or equal to a given number `x`.
3. `Math.floor(x)`: Returns the largest integer less than or equal to a given number `x`.
4. `Math.max(x, y, z, ..., n)`: Returns the largest of zero or more numbers.
5. `Math.min(x, y, z, ..., n)`: Returns the smallest of zero or more numbers.
6. `Math.pow(x, y)`: Returns the base `x` to the exponent `y` (x^y).
7. `Math.sqrt(x)`: Returns the square root of a number `x`.
8. `Math.round(x)`: Returns the value of a number `x` rounded to the nearest integer.
9. `Math.trunc(x)`: Returns the integer part of a number `x` by removing any fractional digits.
10. `Math.random()`: Returns a pseudo-random number between 0 (inclusive) and 1 (exclusive).
11. `Math.sin(x)`: Returns the sine of a number `x` (in radians).
12. `Math.cos(x)`: Returns the cosine of a number `x` (in radians).
13. `Math.tan(x)`: Returns the tangent of a number `x` (in radians).
14. `Math.atan(x)`: Returns the arctangent (inverse of tangent) of a number `x` as a numeric value between -π/2 and π/2 radians.
15. `Math.log(x)`: Returns the natural logarithm (base e) of a number `x`.
16. `Math.exp(x)`: Returns `e^x`, where `e` is the base of natural logarithms.
17. `Math.acos(x)`: Returns the arccosine (inverse of cosine) of a number `x` as a numeric value between 0 and π radians.
18. `Math.asin(x)`: Returns the arcsine (inverse of sine) of a number `x` as a numeric value between -π/2 and π/2 radians.
19. `Math.atan2(y, x)`: Returns the arctangent of the quotient of its arguments `y/x`.
20. `Math.hypot(x, y, z, ..., n)`: Returns the square root of the sum of squares of its arguments (Euclidean distance).

These functions are part of the `Math` object and can be utilized in JavaScript for performing various mathematical calculations.
*/

/*
Certainly! The JavaScript `Math` object provides several properties that represent mathematical constants. Here's a list of properties available in the `Math` object:

1. `Math.E`: Represents the base of natural logarithms, approximately equal to 2.718.
2. `Math.LN2`: Represents the natural logarithm of 2, approximately equal to 0.693.
3. `Math.LN10`: Represents the natural logarithm of 10, approximately equal to 2.303.
4. `Math.LOG2E`: Represents the base-2 logarithm of E, approximately equal to 1.443.
5. `Math.LOG10E`: Represents the base-10 logarithm of E, approximately equal to 0.434.
6. `Math.PI`: Represents the ratio of the circumference of a circle to its diameter, approximately equal to 3.14159.
7. `Math.SQRT1_2`: Represents the square root of 1/2, approximately equal to 0.707.
8. `Math.SQRT2`: Represents the square root of 2, approximately equal to 1.414.

These properties are constants and provide useful mathematical values for various calculations within JavaScript.
 */
